left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for floret_site_utilization
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[2], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
floret_site_utilization <- list()
for (j in 1:length(files)) {
floret_site_utilization[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for florets_per_spikelet
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[3], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
florets_per_spikelet <- list()
for (j in 1:length(files)) {
florets_per_spikelet[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for height
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[4], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
height <- list()
for (j in 1:length(files)) {
height[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for reproductive_tiller_ct
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[5], sep = ""), pattern = "emmeans_genet_transformed_scale", full.names = TRUE)
reproductive_tiller_ct <- list()
for (j in 1:length(files)) {
reproductive_tiller_ct[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for seed_area
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[6], sep = ""), pattern = "emmeans_genet_transformed_scale", full.names = TRUE)
seed_area <- list()
for (j in 1:length(files)) {
seed_area[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for seeds_per_spike
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[7], sep = ""), pattern = "emmeans_genet_transformed_scale", full.names = TRUE)
# read in emmeans files for seed_area
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[6], sep = ""), pattern = "emmeans_genet_transformed_scale", full.names = TRUE)
seed_area <- list()
for (j in 1:length(files)) {
seed_area[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
seed_area[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
seed_area
files
traits[6]
# read in emmeans files for seed_area
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[6], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
seed_area <- list()
for (j in 1:length(files)) {
seed_area[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for seeds_per_spike
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[7], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
seeds_per_spikelet <- list()
for (j in 1:length(files)) {
seeds_per_spikelet[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for spikelet_density
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[8], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
spikelet_density <- list()
for (j in 1:length(files)) {
spikelet_density[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for spikelets_per_spike
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[9], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
spikelets_per_spike <- list()
for (j in 1:length(files)) {
spikelets_per_spike[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for stem_diameter
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[10], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
stem_diameter <- list()
for (j in 1:length(files)) {
stem_diameter[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for thousand_grain_weight
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[11], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
thousand_grain_weight <- list()
for (j in 1:length(files)) {
thousand_grain_weight[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
# read in emmeans files for yield_per_spike
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[12], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
yield_per_spike <- list()
for (j in 1:length(files)) {
yield_per_spike[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
##### Step 2: Prepare SNP Data in Numeric Format #####
# prepare imputed genotype file in numeric format
vcf <- read.vcfR(paste(dir, folder, "/data/NAM_GATK_imputed.vcf", sep = ""), convertNA = TRUE)
# extract genotypes and id_frame
genotypes <- extract.gt(vcf, convertNA = FALSE)
id_frame <- as.data.frame(vcf@fix[,1:5]) # extract a dataframe with SNP ids -- this will come in handy later
id_frame <- id_frame %>% mutate(ID = paste(CHROM, "_", POS, sep = ""))
# update sample names from their ID in variant calling (e.g. flowcell, lane, barcode)
# to their sample names
# read in key
key <- read.table(paste(dir, folder, "/data/new_key.txt", sep = ""), header = T) %>%
mutate(GATK_Sample = paste(Flowcell, "_", Lane, "_", Barcode_ID, "_", sep = "")) %>%
dplyr::select(GATK_Sample, Sample)
# prepare genotypes
genotypes1 <- t(genotypes) # transpose
genotypes2 <- as.data.frame(genotypes1) %>% rownames_to_column(var = "GATK_Sample")
genotypes3 <- left_join(genotypes2, key, by = "GATK_Sample") %>%
column_to_rownames("Sample") %>%
dplyr::select(-GATK_Sample) %>%
t()
# change all | to / to remove phasing information, if any
genotypes3[genotypes3=="0|1"] <- "0/1"
genotypes3[genotypes3=="1|0"] <- "0/1"
genotypes3[genotypes3=="1|1"] <- "1/1"
genotypes3[genotypes3=="0|0"] <- "0/0"
genotypes_numeric <- genotypes3
for (i in 1:nrow(genotypes3)) {
gt <- unlist(genotypes3[i,])
gt1 <- gt
gt1[gt == "0/0"] <- 0
gt1[gt == "0/1"] <- 1
gt1[gt == "1/1"] <- 2
gt1[gt == "./."] <- NA
genotypes_numeric[i,] <- gt1
}
genotypes_numeric <- as.data.frame(t(genotypes_numeric)) %>% rownames_to_column(var = "taxa")
# extract snp information as a separate file
mdp_SNP_information <- id_frame %>%
dplyr::select(ID, CHROM, POS) %>%
dplyr::rename(Name = ID,
Chromosome = CHROM,
Position = POS) %>%
mutate(Chromosome = as.numeric(substr(Chromosome, 4, 5)))
# write out result
write.table(genotypes_numeric, paste(dir, folder, "/output/GATK_NAM_snp_matrix_imputed.table.txt", sep = ""), col.names = T, row.names = F, sep = "\t", quote = F)
write.table(mdp_SNP_information, paste(dir, folder, "/output/mdp_SNP_information.txt", sep = ""), col.names = T, row.names = F, sep = "\t", quote = F)
# read it back in
myGD <- read.table(paste(dir, folder, "/output/GATK_NAM_snp_matrix_imputed.table.txt", sep = ""), head = T)
myGM <- read.table(paste(dir, folder, "/output/mdp_SNP_information.txt", sep = ""), head = T)
#### Step 3: Run GAPIT ####
# edit here only
traits # to reference trait order
trait <- yield_per_spike
trait <- seed_area
trait_name <- c("seed_area")
# set directory
dir.create(paste(dir, folder, "/output/GAPIT/", trait_name, sep = ""))
setwd(paste(dir, folder, "/output/GAPIT/", trait_name, sep = ""))
for (i in 1:length(trait)) {
phenotype <- trait[[i]]
# choose only samples that are in common
P <- phenotype$longID
G <- myGD$taxa
common <- Reduce(intersect, list(G, P))
# filter phenotype data
P2 <- filter(phenotype, longID %in% common) %>% droplevels() %>% arrange(longID)
myGD2 <- myGD %>%
filter(taxa %in% common) %>%
arrange(taxa)
# make sure sample names align
print(summary(myGD2$taxa == P2$longID))
# rename phenotype header
colnames(P2)[1] <- "Taxa"
# rename phenotype to correct trait
colnames(P2)[2] <- paste(trait_name, env[i], sep = "_")
# gapit command
myGAPIT <- GAPIT(
Y=P2,
GD=myGD2,
GM=myGM,
SNP.MAF=0.005, # inserting a MAF here since imputation introduced a few low freq alleles post vcftools filtering
PCA.total = 0)
}
# download gapit
source("http://zzlab.net/GAPIT/gapit_functions.txt")
source("http://zzlab.net/GAPIT/emma.txt")
for (i in 1:length(trait)) {
phenotype <- trait[[i]]
# choose only samples that are in common
P <- phenotype$longID
G <- myGD$taxa
common <- Reduce(intersect, list(G, P))
# filter phenotype data
P2 <- filter(phenotype, longID %in% common) %>% droplevels() %>% arrange(longID)
myGD2 <- myGD %>%
filter(taxa %in% common) %>%
arrange(taxa)
# make sure sample names align
print(summary(myGD2$taxa == P2$longID))
# rename phenotype header
colnames(P2)[1] <- "Taxa"
# rename phenotype to correct trait
colnames(P2)[2] <- paste(trait_name, env[i], sep = "_")
# gapit command
myGAPIT <- GAPIT(
Y=P2,
GD=myGD2,
GM=myGM,
SNP.MAF=0.005, # inserting a MAF here since imputation introduced a few low freq alleles post vcftools filtering
PCA.total = 0)
}
traits
trait <- seeds_per_spike
# read in emmeans files for seeds_per_spike
files <- list.files(paste(dir, "/Phenotypic Data Analysis/data/", traits[7], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
seeds_per_spike <- list()
for (j in 1:length(files)) {
seeds_per_spike[[j]] <- read.table(files[j], header = T) %>%
mutate(year = year[j], loc = loc[j]) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>% # create a column for joining
left_join(backbone, ., by = "famID_plantID3") %>%
dplyr::select(longID, emmean) %>%
filter(! is.na(longID),
! is.na(emmean))
}
seeds_per_spike
#### Step 3: Run GAPIT ####
# edit here only
traits # to reference trait order
trait <- seeds_per_spike
trait_name <- c("seed_area")
trait_name <- c("seeds_per_spike")
# set directory
dir.create(paste(dir, folder, "/output/GAPIT/", trait_name, sep = ""))
setwd(paste(dir, folder, "/output/GAPIT/", trait_name, sep = ""))
for (i in 1:length(trait)) {
phenotype <- trait[[i]]
# choose only samples that are in common
P <- phenotype$longID
G <- myGD$taxa
common <- Reduce(intersect, list(G, P))
# filter phenotype data
P2 <- filter(phenotype, longID %in% common) %>% droplevels() %>% arrange(longID)
myGD2 <- myGD %>%
filter(taxa %in% common) %>%
arrange(taxa)
# make sure sample names align
print(summary(myGD2$taxa == P2$longID))
# rename phenotype header
colnames(P2)[1] <- "Taxa"
# rename phenotype to correct trait
colnames(P2)[2] <- paste(trait_name, env[i], sep = "_")
# gapit command
myGAPIT <- GAPIT(
Y=P2,
GD=myGD2,
GM=myGM,
SNP.MAF=0.005, # inserting a MAF here since imputation introduced a few low freq alleles post vcftools filtering
PCA.total = 0)
}
#### Step 3: Run GAPIT ####
# edit here only
traits # to reference trait order
trait <- spikelets_per_spike
trait_name <- c("spikelets_per_spike")
# set directory
dir.create(paste(dir, folder, "/output/GAPIT/", trait_name, sep = ""))
setwd(paste(dir, folder, "/output/GAPIT/", trait_name, sep = ""))
for (i in 1:length(trait)) {
phenotype <- trait[[i]]
# choose only samples that are in common
P <- phenotype$longID
G <- myGD$taxa
common <- Reduce(intersect, list(G, P))
# filter phenotype data
P2 <- filter(phenotype, longID %in% common) %>% droplevels() %>% arrange(longID)
myGD2 <- myGD %>%
filter(taxa %in% common) %>%
arrange(taxa)
# make sure sample names align
print(summary(myGD2$taxa == P2$longID))
# rename phenotype header
colnames(P2)[1] <- "Taxa"
# rename phenotype to correct trait
colnames(P2)[2] <- paste(trait_name, env[i], sep = "_")
# gapit command
myGAPIT <- GAPIT(
Y=P2,
GD=myGD2,
GM=myGM,
SNP.MAF=0.005, # inserting a MAF here since imputation introduced a few low freq alleles post vcftools filtering
PCA.total = 0)
}
# load required packages
library("sommer")
library('sommer')
library("vcfR")
library("dplyr")
library("ggplot2")
library("tibble")
library("rrBLUP")
library("tidyr")
# location of github directory
dir <- "/Users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Domestication Traits/Scripts for Github/"
# location of github directory
dir <- "/Users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Yield Components Mapping/Scripts for Github/"
# script we're on
folder <- c("/GWAS")
# create a vector of traits
traits <- c("rachis_breaks_mean", "floret_score_mean", "reproductive_tiller_ct", "threshability", "floret_site_utilization", "height", "thousand_grain_weight")
# create a vector of traits
traits <- c("flag_leaf_area", "floret_site_utilization", "florets_per_spikelet", "height", "reproductive_tiller_ct",
"seed_area", "seeds_per_spike", "spikelet_density", "spikelets_per_spike", "stem_diameter",
"thousand_grain_weight", "yield_per_spike")year <- c("2017", "2018", "2017", "2018")
year <- c("2017", "2018", "2017", "2018")
# create a vector of traits
traits <- c("flag_leaf_area", "floret_site_utilization", "florets_per_spikelet", "height", "reproductive_tiller_ct",
"seed_area", "seeds_per_spike", "spikelet_density", "spikelets_per_spike", "stem_diameter",
"thousand_grain_weight", "yield_per_spike")
year <- c("2017", "2018", "2017", "2018")
loc <- c("STP", "STP", "TLI", "TLI")
env <- c("stp17", "stp18", "tli17", "tli18")
# set the base pair threshold - this was identified in the LD analysis
# LD decays below 0.2 at a median rate of 21 cM. Average distance bp distance per cM across chromosomes x 21 =
bp_threshold <-  63093157
#### Step 1: Read in and Format Genotypic Data ####
# this is the imputed dataset which was used in GWAS
vcf <- read.vcfR(paste(dir, folder, "/data/NAM_GATK_imputed.vcf", sep = ""), convertNA = TRUE)
# extract genotypes and id_frame
genotypes <- extract.gt(vcf, convertNA = FALSE)
id_frame <- as.data.frame(vcf@fix[,1:5]) %>% mutate(ID = paste(CHROM, "_", POS, sep = ""))
# update sample names from their ID in variant calling (e.g. flowcell, lane, barcode) to their sample names
# read in key
key <- read.table(paste(dir, folder, "/data/new_key.txt", sep = ""), header = T) %>%
mutate(GATK_Sample = paste(Flowcell, "_", Lane, "_", Barcode_ID, "_", sep = "")) %>%
dplyr::select(GATK_Sample, Sample)
# prepare genotypes
genotypes <- as.data.frame(t(genotypes)) %>%
rownames_to_column(var = "GATK_Sample") %>%
left_join(., key, by = "GATK_Sample") %>%
arrange(Sample) %>%
column_to_rownames("Sample") %>%
dplyr::select(-GATK_Sample) %>%
t()
# change all | to / to remove any phasing information that might be present
genotypes[genotypes=="0|1"] <- "0/1"
genotypes[genotypes=="1|0"] <- "0/1"
genotypes[genotypes=="1|1"] <- "1/1"
genotypes[genotypes=="0|0"] <- "0/0"
# convert to marker matrix
genotypes_matrix <- genotypes # create a new dataframe for the output
for (i in 1:nrow(genotypes)) {
gt <- unlist(genotypes[i,])
gt1 <- gt
gt1[gt == "0/0"] <- 1
gt1[gt == "0/1"] <- 0
gt1[gt == "1/1"] <- -1
gt1[gt == "./."] <- NA
genotypes_matrix[i,] <- gt1
}
genotype <- cbind(id_frame, genotypes_matrix)  # add the id_frame back
rownames(genotype) <- NULL # remove rownames
#### Step 2: Read in and Format Phenotypic Data ####
# read in backbone
backbone <- read.csv(paste(dir, "Phenotypic Data Analysis/Data/", "backbone.csv", sep = ""), header = T) %>%
dplyr::select(famID, parent, plantID, plantID3, longID) %>%
mutate(famID_plantID3 = paste(famID, plantID3, sep = "_")) %>%
dplyr::select(-plantID3, -famID) %>%
distinct()
# read in emmeans files for rachis_breaks_mean
files <- list.files(paste(dir, "/Phenotypic Data Analysis/output/", traits[1], sep = ""), pattern = "emmeans_genet", full.names = TRUE)
# location of github directory
dir <- "/users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Yield Components Mapping/Scripts for Github/"
# folder we're on
folder <- c("/Phenotypic Data Analysis")
# declare where you want the output to go
out_path <- paste(dir, folder, "/output", sep = "")
in_path <- paste(dir, folder, "/data", sep = "")
#### Step 1: Read in the Data that Includes the Parents #### to create this see lines 59 and 72-73 of Phenotypic Data Formatting and Linear Models
dat <- read.csv(paste(dir, folder, "/data/data_including_parents.csv", sep = ""), header = T) %>%
mutate(parent = substr(germplasm_id, 6, 6)) %>%
mutate(merge_col = paste(germplasm_id, loc, year, rep, sep = "_"))
dat2 <- read.csv("/Users/kayla.altendorf/OneDrive - USDA/Publications/IWG NAM Yield Components Mapping/Scripts for Github/Phenotypic Data Analysis/data/data_including_parents_all_traits.csv", header = T)
dat <- left_join(dat, dat2, by = "merge_col")
#### Step 2: Calculate Parental Means ####
# set vectors
# environments
loc <- c("STP", "STP", "TLI", "TLI")
year <- c("2017", "2018", "2017", "2018")
envs <- c("stp17", "stp18", "tli17", "tli18")
mother <- c("C", "D")
# families
famID <- c("WGN07", "WGN15", "WGN26", "WGN36", "WGN38", "WGN39", "WGN45", "WGN46", "WGN55", "WGN63")
# list of traits we're dealing with
trait <- c("flag_leaf_area", "floret_site_utilization", "florets_per_spikelet", "height", "reproductive_tiller_ct",
"seed_area", "seeds_per_spike", "spikelet_density", "spikelets_per_spike", "stem_diameter",
"thousand_grain_weight", "yield_per_spike")
# separate out common and donor parent means
common_parent_means <- list()
donor_parent_means <- list()
file <- paste(out_path, "/parental_means.txt", sep = "")
for (i in 1:length(trait)) {
fam <- dat %>% filter(parent == "P") %>% dplyr::select(famID, loc, year, trait[i])
fam_sum <- fam %>% group_by(loc, year, famID) %>% summarize_all(mean, na.rm = T)
colnames(fam_sum)[4] <- "mean"
# export fam_sum while we're here
fam_sum_out <- fam_sum %>% pivot_wider(id_cols = famID, names_from = c("loc", "year"), values_from = "mean")
fam_sum_out[,-1] <-round(fam_sum_out[,-1],2)
cat(paste("\t", trait[i], sep = ""), file = file, append = T)
cat("\n", file = file, append = T)
write.table(fam_sum_out, file, row.names = T, col.names = T, sep = "\t", quote = F, append = T)
cat("\n", file = file, append = T)
### continue
common_parent_means[[i]] <- fam_sum %>% filter(famID == "WGN59")
donor_parent_means[[i]] <- fam_sum %>% filter(famID != "WGN59")
for (j in 1:length(donor_parent_means)) {
donor_means <- donor_parent_means[[j]] %>% mutate(dif = NA)
for (k in 1:nrow(donor_means)) {
if (donor_means$loc[k] == "STP" & donor_means$year[k] == "2017") {
donor_means$dif[k] <- abs(donor_means$mean[k] - common_parent_means[[j]][1, 4])[,1] }
else if (donor_means$loc[k] == "STP" & donor_means$year[k] == "2018") {
donor_means$dif[k] <- abs(donor_means$mean[k] - common_parent_means[[j]][2, 4])[,1] }
else if (donor_means$loc[k] == "TLI" & donor_means$year[k] == "2017") {
donor_means$dif[k] <- abs(donor_means$mean[k] - common_parent_means[[j]][3, 4])[,1] }
else if (donor_means$loc[k] == "TLI" & donor_means$year[k] == "2018") {
donor_means$dif[k] <- abs(donor_means$mean[k] - common_parent_means[[j]][4, 4])[,1] }
}
donor_parent_means[[j]] <- donor_means
}
}
donor_parent_means
donor_parent_means
fam <- dat %>% filter(parent == "P") %>% dplyr::select(famID, loc, year, trait[i])
fam
fam_sum <- fam %>% group_by(loc, year, famID) %>% summarize_all(mean, na.rm = T)
fam_sum
library("dplyr")
fam_sum <- fam %>% group_by(loc, year, famID) %>% summarize_all(mean, na.rm = T)
fam_sum
